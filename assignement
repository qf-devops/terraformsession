1. install aws cli, terarform, visual studio code in local machine.

2. create ec2 instance with t2.micro, ubuntu images on us-east-1 region.

3. create key-pair with terraform and attacxh it to ec2 insrtance.
    https://www.linkedin.com/pulse/creating-key-pair-ec2-instance-running-script-using-terraform-pant

4. create resources for dev and staging from same directory with same code with tfvars differences, differentiate terraformtfstate files for dev and staging in smae directory.

terraform plan -out=dev.plan -var-file=dev.tfvars -state=dev.tfsttae
terraform apply -state=dev.tfstate dev.plan 


terraform plan -out=staging.plan -var-file=staging.tfvars -state=staging.tfstate
terraform apply -state=staging.tfstate staging.plan 

5. same backend i.e s3 bucket
   how to handle or pass path asa parmamter for single backend with diifdrent path for different env...

6. read about different input variables in terraform.
    string
    numner
    list
    dict
7. install docker in ec2 or local machine, run below command for container
   docker run -itd -tf devopsjuly22017/terraform
   docker exec -it tf bash
8. setup aws configure and clone below repo and run terraform commands≥
    aws configure
    git clone repo
    terraform commands.

9. create multiple aws ec2 instances with terraform.
    count
10. Create multiple ec2 instanes by using list variable (by using itertion  method alias for loop.)

11. Add userdata through terraform to configure as part of bootstrap.

12. create s3 bucket and ec2 instance using terraform.

13 . Attch existing ssh keypair, securitygroup, add userdata.

resource "aws_instance" "app_server" {
  ami           = "ami-0fc5d935ebf8bc3bc"
  instance_type = "t2.micro"

  tags = {
    Name = "ExampleAppServerInstance"
  }
}


userdata:
    #!/bin/bash
    sudo apt update
    sudo apt install nginx -y
    sudo systemctl enable nginx

solution:
   resource "aws_instance" "Rajguru-Nginx-server" {
  ami = "ami-00b8917ae86a424c9"
  instance_type = "t2.micro"
  key_name = "user18-ppk"
  security_groups = ["launch-wizard-4"]
  user_data = file("/terraformsession/script.sh")
}

14. create security group and attach it to ec2 instance.

15 . create multiple ec2 instances with count parameter.

16. create public subnet with igw and attch to ec2
17. create private subnet with natgat way
18. refer elb directory and execute 
19. prepare one  diagram based on resources used.
20 readabout autoscaling and terraform modules.
21. create ec2, vpc and elb folders and rune terraform with modules.
22. AVG Cpu utilization reached to 80   ⇒ Add 2 more ec instances

Avg cpu utilization on ec2 instances reached to 50% ⇒ Delete 1 ec2 instance

ASG
⇒ auto scaling group
Enable the scale out and scale in policies to automatically to handle scaling with asg.

23. Run linux commands on ec2 with remote_exec resource
    ref: https://registry.terraform.io/providers/hashicorp/null/latest/docs/resources/resource

   https://jhooq.com/terraform-null-resource/

24. How to use for loop in terraform

25. How to use if condition in terraform

26. Create lambda function with sample python code using terraform

27. read cloudwatch logs with python using lambda function

28. How to read dictionary/map values in python/golang

29. cassandra module walkthrough :
   https://github.com/Azure/terraform-azurerm-cosmosdb/blob/main/examples/103-cosmosdb-cassandra-api/main.tf
    https://github.com/Azure/terraform-azurerm-cosmosdb/blob/main/cassandra.tf


30. what  is dynamic block  in terraform.
   ex: https://stackoverflow.com/questions/51207505/terraform-dynamic-tags-on-asg-and-other-resources-like-efs
     
31. explore on workspace with different env.
    dev  stage prod

32. pg as backend with docker.

33. ddb and s3 as a back and statelock

34. create pipeline to run terraform scripts.

35 . read about github actions 

36. docker and k8s providers with terraform

37. how to use two providers in sinlge  directory as part of terraform
    aws, docker

38. add kubernetes provider with aws eks terraform module.

39. refer:  https://github.com/qfitsolutions/aws-terraform-course.git