1. install aws cli, terarform, visual studio code in local machine.

2. create ec2 instance with t2.micro, ubuntu images on us-east-1 region.

3. create key-pair with terraform and attacxh it to ec2 insrtance.
    https://www.linkedin.com/pulse/creating-key-pair-ec2-instance-running-script-using-terraform-pant

4. create resources for dev and staging from same directory with same code with tfvars differences, differentiate terraformtfstate files for dev and staging in smae directory.

terraform plan -out=dev.plan -var-file=dev.tfvars -state=dev.tfsttae
terraform apply -state=dev.tfstate dev.plan 


terraform plan -out=staging.plan -var-file=staging.tfvars -state=staging.tfstate
terraform apply -state=staging.tfstate staging.plan 

5. same backend i.e s3 bucket
   how to handle or pass path asa parmamter for single backend with diifdrent path for different env...

6. read about different input variables in terraform.
    string
    numner
    list
    dict
7. install docker in ec2 or local machine, run below command for container
   docker run -itd -tf devopsjuly22017/terraform
   docker exec -it tf bash
8. setup aws configure and clone below repo and run terraform commandsâ‰¥
    aws configure
    git clone repo
    terraform commands.

9. create multiple aws ec2 instances with terraform.
    count
10. Create multiple ec2 instanes by using list variable (by using itertion  method alias for loop.)

11. Add userdata through terraform to configure as part of bootstrap.

12. create s3 bucket and ec2 instance using terraform.

13 . Attch existing ssh keypair, securitygroup, add userdata.

resource "aws_instance" "app_server" {
  ami           = "ami-0fc5d935ebf8bc3bc"
  instance_type = "t2.micro"

  tags = {
    Name = "ExampleAppServerInstance"
  }
}


userdata:
    #!/bin/bash
    sudo apt update
    sudo apt install nginx -y
    sudo systemctl enable nginx
   